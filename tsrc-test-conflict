#!/bin/bash

# Global variables
github_user=""
github_key=""

# Function to get GithubName from turbosrc.config
get_github_user() {
    github_user=$(jq -r '.GithubName' ./turbosrc.config)
    echo "Using $github_user"
}

# Function to get GithubApiToken from turbosrc.config
get_github_key() {
    github_key=$(jq -r '.GithubApiToken' ./turbosrc.config)
    echo "Using github api key found in turbosrc.config"
}

# Function to push to GitHub using credentials
# Takes a branch name as an argument
git_push_with_credentials() {
    get_github_user
    get_github_key
    local local_branch_name=$1
    local remote_branch_name=$2

    if [ -z "$local_branch_name" ] || [ -z "$remote_branch_name" ]; then
        echo "Local and remote branch names are required."
        return 1
    fi

    # Navigate to the demo directory
    cd ./demo || return

    # Create a temporary script to output the password
    echo_script=$(mktemp)
    echo "echo $github_key" > "$echo_script"
    chmod +x "$echo_script"

    # Use the temporary script for GIT_ASKPASS and push the specific branch to the temporary remote URL
    GIT_ASKPASS="$echo_script" git -c credential.helper= -c user.name="$github_user" -c user.password="$github_key" push --force "https://github.com/$github_user/demo.git" "$local_branch_name:$remote_branch_name"

    # Clean up: Remove the temporary script
    rm "$echo_script"

    # Return to the original directory
    cd -
}

# Parse command line arguments
case "$1" in
    get-user)
        get_github_user
        ;;
    get-key)
        get_github_key
        ;;
    git-push)
        shift # Remove 'git-push' from the arguments
        git_push_with_credentials "$@"
        ;;
    *)
        echo "Usage: $0 {get-user|get-key|git-push <branch>}"
        exit 1
        ;;
esac