#!/bin/bash

set -eo pipefail

VISUAL_TESTS=false

function delete_fork() {
  REPO=$1
  docker-compose run gihtubmakertools -d -r $REPO
}

function fork_repo() {
  REPO=$1
  docker-compose run fork-repo node fork-repo.js "turbo-src/$REPO"
}

function create_pull_request() {
  echo ""
  echo "Creating pull requests..."
  echo "" && sleep 1
  USERNAME=$1
  REPO=$2

  PR_COMMANDS=(
    "refactor(lsp): remove redundant client cleanup pullRequest1"
    "refactor(uncrustify): set maximum number of consecutive newlines pullRequest2"
    "ci(mingw): only enable -municode for MinGW pullRequest3"
    "docs: add missing termdebug docs from Vim runtime updates pullRequest4"
    "refactor: missing parenthesis may cause unexpected problems pullRequest5"
    "refactor(normal): convert function comments to doxygen format pullRequest6"
  )

  for PR in "${PR_COMMANDS[@]}"; do
    IFS=" " read -r -a PR_ARRAY <<< "$PR"
    MESSAGE="${PR_ARRAY[0]}"
    BRANCH_NAME="${PR_ARRAY[1]}"

    if ! docker-compose run create_pull_requests python create_pull_requests.py "$USERNAME" "$REPO" "master" "$BRANCH_NAME" "$MESSAGE" "auto pull request"; then
      echo "Error: $BRANCH_NAME failed."
      exit 1
    fi
  done
}

function run_tests() {
    echo ""
    echo "Running tests..."
    echo "" && sleep 1

    tests=(
        "createUser"
        "createRepo"
        "transferTokens"
        "twoVoters"
        "singleMajorityVoter"
        "duplicateVote"
        "manyVoters"
        "semiAutoManyVoters"
    )

    for test in "${tests[@]}"; do
        # Construct the full path of the test file
        full_test_path="testing/integration/privaterepo/${test}.js"

        # Uncomment and modify the if condition if you need to skip some tests based on conditions
        #if [[ "$VISUAL_TESTS" = true && ( "$full_test_path" = "testing/integration/privaterepo/createRepo.js" ) ]]; then
        #    echo "Skipping $full_test_path due to --visual flag"
        #    continue
        #fi

        OUTPUT=$(docker-compose exec -T turbosrc-service npm test "$full_test_path" 2>&1) || {
            echo "Error running $test test";
            echo "Output: $OUTPUT";
            exit 1;
        }
        echo "$OUTPUT"
        sleep 1
        echo ""
        if [[ "$VISUAL_TESTS" = true ]]; then
            echo "Taking a screenshot of $test test..."
            docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py "${test}".png
            echo ""
            echo "Screen shot completed."
            sleep 5
	fi
    done
}

function execute_all_except_tests() {
  delete_fork $REPO
  fork_repo $REPO
  create_pull_request $USERNAME $REPO
}

if [ $# -lt 2 ]; then
  echo "Usage: $0 <username> <repository> [delete_fork|fork_repo|create_pull_request|run_tests|execute_all|execute_all_except_tests] [--visual]"
  exit 1
fi

USERNAME=$1
REPO=$2
ACTION=""
VISUAL_FLAG=""

shift 2

while (( "$#" )); do
  case "$1" in
    delete_fork|fork_repo|create_pull_request|run_tests|execute_all|execute_all_except_tests)
      if [ -z "$ACTION" ]; then
        ACTION=$1
      else
        echo "Multiple actions specified."
        exit 1
      fi
      ;;
    --visual)
      VISUAL_FLAG="--visual"
      VISUAL_TESTS=true
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
  shift
done

if [ -z "$ACTION" ]; then
  echo "No action specified."
  echo "Usage: $0 <username> <repository> [delete_fork|fork_repo|create_pull_request|run_tests|execute_all|execute_all_except_tests] [--visual]"
  exit 1
fi

case "$ACTION" in
  "delete_fork")
    delete_fork $REPO
    ;;
  "fork_repo")
    fork_repo $REPO
    ;;
  "create_pull_request")
    create_pull_request $USERNAME $REPO
    ;;
  "run_tests")
    run_tests
    ;;
  "execute_all")
    delete_fork $REPO
    fork_repo $REPO
    create_pull_request $USERNAME $REPO
    run_tests
    ;;
  "execute_all_except_tests")
    execute_all_except_tests
    ;;
esac
