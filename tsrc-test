#!/bin/bash

set -eo pipefail

VISUAL_TESTS=false

function delete_fork() {
  REPO=$1
  docker-compose run gihtubmakertools -d -r $REPO
}

function fork_repo() {
  REPO=$1
  docker-compose run fork-repo node fork-repo.js "turbo-src/$REPO"
}

function reset_pull_request_six() {
  # Ensure pull request 6 is in conflict
  ./tsrc-test-conflict git-push pullRequest6 pullRequest6
}

function deconflict_pull_request_six() {
  # Deconflict feature branch with `git --forc push` for pull request 6.
  ./tsrc-test-conflict git-push pullRequest6ConflictResolved pullRequest6
}

function create_pull_request() {
  echo ""
  echo "Creating pull requests..."
  echo "" && sleep 1
  USERNAME=$1
  REPO=$2

  PR_COMMANDS=(
    "refactor(lsp): remove redundant client cleanup pullRequest1"
    "refactor(uncrustify): set maximum number of consecutive newlines pullRequest2"
    "ci(mingw): only enable -municode for MinGW pullRequest3"
    "docs: add missing termdebug docs from Vim runtime updates pullRequest4"
    "refactor: missing parenthesis may cause unexpected problems pullRequest5"
    "refactor(normal): convert function comments to doxygen format pullRequest6"
  )

  for PR in "${PR_COMMANDS[@]}"; do
    IFS=" " read -r -a PR_ARRAY <<< "$PR"
    MESSAGE="${PR_ARRAY[0]}"
    BRANCH_NAME="${PR_ARRAY[1]}"

    if ! docker-compose run create_pull_requests python create_pull_requests.py "$USERNAME" "$REPO" "master" "$BRANCH_NAME" "$MESSAGE" "auto pull request"; then
      echo "Error: $BRANCH_NAME failed."
      exit 1
    fi
  done
}

function run_tests() {
    echo ""
    echo "Running tests..."
    echo "" && sleep 1

    tests=(
        "createUser"
        "createRepo"
        "transferTokens"
        "twoVoters"
        "singleMajorityVoter"
        "duplicateVote"
        "manyVoters"
        "semiAutoManyVoters"
        #"conflict"
        #"conflictResolved"
    )

    for test in "${tests[@]}"; do
        full_test_path="testing/integration/privaterepo/${test}.js"

        # Skip conflict tests as they are done visually.
        if [[ "$VISUAL_TESTS" = false || ( "$test" != "conflict" && "$test" != "conflictResolved" ) ]]; then
          if [[ "$test" = "conflictResolved" ]]; then
             deconflict_pull_request_six
          fi
          OUTPUT=$(docker-compose exec -T turbosrc-service npm test "$full_test_path" 2>&1) || {
              echo "Error running $test test";
              echo "Output: $OUTPUT";
              exit 1;
          }
          echo "$OUTPUT"
          sleep 1
          echo ""
        fi

        # New code to prompt the user to continue for specific tests
        if [[ "$VISUAL_TESTS" = true && ( "$full_test_path" = "testing/integration/privaterepo/createRepo.js" ) ]]; then
            #echo "Finished $test test. Press 'y' and enter to continue go thru login process"
            #read -n 1 -r key_login
            #if [[ $key_login = "y" ]]; then
            login_viatui
            view_image "viatui/chromium-nix-screenshots/login.png"
            sleep 3
            #    echo "Check if login successful. Run, if necesssary"
            #    echo ""
            #    echo "docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/login_confirm XXXXX"
            #    echo ""
            #    echo "Press 'y' and enter when complete."
            #    read -n 1 -r key_load_buttons
            #    if [[ $key_load_buttons = "y" ]]; then
            #        load_buttons_viatui
            #    fi
            load_buttons_viatui
            view_image "viatui/chromium-nix-screenshots/load-vote-buttons.png"

            #else
            #    echo "Test skipped by user."
            #    continue
            #fi
        fi

        # Run tests unless specified to ignore, such as conflict and conflict resolved which are purely viatui tests
        if [[ "$VISUAL_TESTS" = true ]]; then
            if [[ "$full_test_path" != "testing/integration/privaterepo/createRepo.js" && "$full_test_path" != "testing/integration/privaterepo/createUser.js" && "$full_test_path" != "testing/integration/privaterepo/semiAutoManyVoters.js" && "$full_test_path" != "testing/integration/privaterepo/conflict.js" && "$full_test_path" != "testing/integration/privaterepo/conflictResolve.js" ]]; then
                echo "Taking a screenshot of $test test..."
                docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py "${test}".png
                echo ""
                echo "Screen shot completed."
                sleep 5
                view_image "viatui/chromium-nix-screenshots/${test}.png"
            fi
        fi

        if [[ "$VISUAL_TESTS" = true && ( "$full_test_path" = "testing/integration/privaterepo/semiAutoManyVoters.js" ) ]]; then
            docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/vote_merge_pull_request_5.py
            sleep 3
            echo "Taking a screenshot of $test test..."
            docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py "${test}".png
            echo ""
            echo "Screen shot completed."
            sleep 5
            view_image "viatui/chromium-nix-screenshots/${test}.png"
        fi
        if [[ "$VISUAL_TESTS" = true && ( "$full_test_path" = "testing/integration/privaterepo/conflict.js" ) ]]; then
          # Fail case, shouldn't vote in pull request 6 as in conflict.
          docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/conflict.py
          sleep 3
          echo "Taking a screenshot of $test test..."
          docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py "${test}".png
          echo ""
          echo "Screen shot completed."
          sleep 5
          view_image "viatui/chromium-nix-screenshots/${test}.png"
        fi
        if [[ "$VISUAL_TESTS" = true && ( "$full_test_path" = "testing/integration/privaterepo/conflictResolved.js" ) ]]; then
          deconflict_pull_request_six
          # Fail case, shouldn't vote in pull request 6 as in conflict.
          docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/conflict_resolved.py
          sleep 3
          echo "Taking a screenshot of $test test..."
          docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py "${test}".png
          echo ""
          echo "Screen shot completed."
          sleep 5
          view_image "viatui/chromium-nix-screenshots/${test}.png"
        fi

          #  # Ensure pull request 6 is not in conflict
          #  ./tsrc-test-conflict git-push pullRequest6 pullRequest6ConflictResolved
          #  sleep 3
          #  echo "Taking a screenshot of $test test..."
          #  docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py "${test}".png
          #  echo ""
          #  echo "Screen shot completed."
          #  sleep 5
          #  view_image "viatui/chromium-nix-screenshots/${test}.png"
          #  echo "Finished $test test. Press 'y' and enter to continue go thru login process"
    done
}

function deconflict_visual_test() {
    # Fail case, shouldn't vote in pull request 6 as in conflict.
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/vote_merge_pull_request_6.py
    sleep 3
    echo "Taking a screenshot of $test test..."
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py "vote_merge_pull_request_6".png
    echo ""
    echo "Screen shot completed."
    sleep 5
    view_image "viatui/chromium-nix-screenshots/vote_merge_pull_request_6.png"

    echo "deconflict feature branch with `git --forc push` for pull request 6."
    deconflict_pull_request_six
    sleep 5

    # Success case, should vote in pull request 6 is not in conflict.
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/vote_merge_pull_request_6_out_of_conflict.py
    sleep 3
    echo "Taking a screenshot of $test test..."
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py "vote_merge_pull_request_6_out_of_conflict.png"
    echo ""
    echo "Screen shot completed."
    sleep 5
    view_image "viatui/chromium-nix-screenshots/vote_merge_pull_request_6_out_of_conflict.png"
    sleep 5
}

function view_image() {
    image_path="$1"

    # Check if the image path is provided
    if [[ -z "$image_path" ]]; then
        echo "No image path provided."
        return 1
    fi

    # Check if the file exists
    if [[ ! -f "$image_path" ]]; then
        echo "File does not exist: $image_path"
        return 1
    fi

    # Determine the operating system
    case "$(uname)" in
        "Linux")
            # For Linux, using eog (Eye of GNOME) as a common viewer
            xdg-open "$image_path" # Removed redirection to /dev/null for debugging
            ;;
        "Darwin")
            # For macOS, using the 'open' command
            open "$image_path" # Removed redirection to /dev/null for debugging
            ;;
        *)
            echo "Unsupported operating system."
            return 1
            ;;
    esac
}

function login_viatui() {
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/login.py
    sleep 2
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py login.png
}

function load_turbosrc_viatui() {
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/load_turbosrc.py
    sleep 2
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py load-turbosrc.png
}

function execute_all_except_tests() {
  delete_fork $REPO
  fork_repo $REPO
  create_pull_request $USERNAME $REPO
}

function load_buttons_viatui() {
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/load_vote_buttons.py
    sleep 2
    docker-compose exec -it viatui /root/.local/bin/poetry run python scripts/container_screenshot.py load-vote-buttons.png
}

if [ $# -lt 2 ]; then
  echo "Usage: $0 <username> <repository> [delete_fork|fork_repo|create_pull_request|run_tests|execute_all|execute_all_except_tests] [--visual]"
  exit 1
fi

USERNAME=$1
REPO=$2
ACTION=""
VISUAL_FLAG=""

shift 2

while (( "$#" )); do
  case "$1" in
    delete_fork|fork_repo|create_pull_request|run_tests|execute_all|execute_all_except_tests)
      if [ -z "$ACTION" ]; then
        ACTION=$1
      else
        echo "Multiple actions specified."
        exit 1
      fi
      ;;
    --visual)
      VISUAL_FLAG="--visual"
      VISUAL_TESTS=true
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
  shift
done

if [ -z "$ACTION" ]; then
  echo "No action specified."
  echo "Usage: $0 <username> <repository> [delete_fork|fork_repo|create_pull_request|run_tests|execute_all|execute_all_except_tests] [--visual]"
  exit 1
fi

case "$ACTION" in
  "delete_fork")
    delete_fork $REPO
    ;;
  "fork_repo")
    fork_repo $REPO
    ;;
  "create_pull_request")
    create_pull_request $USERNAME $REPO
    ;;
  "run_tests")
    if [[ "$VISUAL_TESTS" = true ]]; then
        echo "loading turbosrc extension"
        load_turbosrc_viatui
        view_image "viatui/chromium-nix-screenshots/load-turbosrc.png"
        echo "Reset pull request 6 to ensure is no conflict."
    fi
    reset_pull_request_six
    run_tests
    ;;
  "execute_all")
    delete_fork $REPO
    fork_repo $REPO
    create_pull_request $USERNAME $REPO
    run_tests
    ;;
  "execute_all_except_tests")
    execute_all_except_tests
    ;;
esac
